name: Robot Framework Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  mobile-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Set up Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Cache Android SDK
      uses: actions/cache@v4
      with:
        path: |
          ~/.android/cache
          ~/.gradle/caches
          ~/.android/avd
        key: ${{ runner.os }}-android-sdk-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-android-sdk-
          
    - name: Install Android SDK components
      run: |
        echo "y" | sdkmanager --licenses
        echo "y" | sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"
        echo "y" | sdkmanager "system-images;android-34;google_apis;x86_64"
        echo "y" | sdkmanager "emulator"
        
    - name: Create AVD
      run: |
        echo "no" | avdmanager create avd -n test_emulator -k "system-images;android-34;google_apis;x86_64" -d "pixel_7" --force
        
    - name: Start emulator manually
      run: |
        echo "=== Starting emulator manually ==="
        export ANDROID_HOME=$ANDROID_SDK_ROOT
        export PATH=$PATH:$ANDROID_HOME/emulator:$ANDROID_HOME/platform-tools
        
        # Start emulator in background
        $ANDROID_HOME/emulator/emulator -avd test_emulator -no-window -gpu swiftshader_indirect -no-audio -no-boot-anim -no-snapshot -wipe-data -memory 2048 -cores 2 -no-metrics &
        EMULATOR_PID=$!
        echo "Emulator PID: $EMULATOR_PID"
        
        # Wait for emulator to be ready
        echo "Waiting for emulator to be ready..."
        timeout 600 bash -c 'until adb devices | grep -q "emulator-5554.*device"; do sleep 10; echo "Waiting for device..."; done'
        
        echo "Waiting for boot completion..."
        timeout 600 bash -c 'until adb shell getprop sys.boot_completed | grep -q "1"; do sleep 10; echo "Waiting for boot..."; done'
        
        echo "Emulator is ready!"
        
    - name: Install APK and run tests
      run: |
        echo "=== Installing APK ==="
        export ANDROID_HOME=$ANDROID_SDK_ROOT
        export PATH=$PATH:$ANDROID_HOME/emulator:$ANDROID_HOME/platform-tools
        
        # Check for APK file with correct name
        if [ -f "./automation_dhyan_9thSept 1.apk" ]; then
          echo "Installing APK: automation_dhyan_9thSept 1.apk"
          adb install -r "./automation_dhyan_9thSept 1.apk"
          echo "APK installed successfully"
        elif [ -f "./automation_dhyan_9thSept.apk" ]; then
          echo "Installing APK: automation_dhyan_9thSept.apk"
          adb install -r "./automation_dhyan_9thSept.apk"
          echo "APK installed successfully"
        else
          echo "APK file not found, listing files:"
          ls -la *.apk || echo "No APK files found"
          exit 1
        fi
        
        echo "=== Installing Appium ==="
        npm install -g appium@latest
        appium driver install uiautomator2
        
        echo "=== Starting Appium Server ==="
        appium --port 4723 --log-level info &
        APPIUM_PID=$!
        sleep 20
        
        echo "=== Verifying Appium connection ==="
        timeout 60 bash -c 'until curl -f http://localhost:4723/status; do sleep 5; done'
        
        echo "=== Running CI Verification Tests ==="
        robot --outputdir results --include "CI" tests/CI_Verification.robot
        
        echo "=== Running Fixed Setup Tests ==="
        robot --outputdir results --include "FixedSetup" tests/Test_Fixed_Setup.robot
        
        echo "=== Running Robot Framework Tests ==="
        robot --outputdir results --include "WarishTest" tests/
        
        echo "=== Stopping Appium ==="
        kill $APPIUM_PID || true
        
    - name: Stop emulator
      if: always()
      run: |
        echo "=== Stopping emulator ==="
        export ANDROID_HOME=$ANDROID_SDK_ROOT
        export PATH=$PATH:$ANDROID_HOME/emulator:$ANDROID_HOME/platform-tools
        
        # Kill emulator process
        pkill -f emulator || true
        adb emu kill || true
          
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: mobile-test-results
        path: |
          results/
        retention-days: 30
        
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Robot Framework Tests
        path: results/output.xml
        reporter: java-junit

  web-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up Chrome
      uses: browser-actions/setup-chrome@v1
      with:
        chrome-version: stable
        
    - name: Run web tests
      run: |
        echo "=== Running Web Tests ==="
        robot --outputdir web-results --include "WebTest" tests/
        
    - name: Upload web test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: web-test-results
        path: |
          web-results/
        retention-days: 30
        
    - name: Publish web test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Web Tests
        path: web-results/output.xml
        reporter: java-junit
