trigger:
  branches:
    include:
    - main
    - develop

schedules:
- cron: "0 21 * * *"  # Daily at 9:00 PM UTC
  displayName: Daily Robot Framework Tests
  branches:
    include:
    - main
  always: true

pool:
  name: 'Default'
  # vmImage: 'ubuntu-latest'  # Commented out to use self-hosted agent

variables:
  python.version: '3.9'
  ANDROID_HOME: '/opt/android-sdk'
  ANDROID_SDK_ROOT: '/opt/android-sdk'

jobs:
- job: MobileTests
  displayName: 'Robot Framework Mobile Tests'
  
  steps:
  - task: UsePythonVersion@0
    displayName: 'Use Python $(python.version)'
    inputs:
      versionSpec: '$(python.version)'
      addToPath: true

  - script: |
      python -m pip install --upgrade pip
      pip install -r requirements.txt
      npm install -g appium@2.0.0
    displayName: 'Install Dependencies'

  - script: |
      sudo apt-get update
      sudo apt-get install -y \
        openjdk-11-jdk \
        android-tools-adb \
        wget \
        unzip \
        curl
    displayName: 'Install System Dependencies'

  - script: |
      # Download and setup Android SDK
      sudo mkdir -p /opt/android-sdk
      sudo chown $USER:$USER /opt/android-sdk
      
      wget https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip
      unzip commandlinetools-linux-8512546_latest.zip -d /opt/android-sdk
      mkdir -p /opt/android-sdk/cmdline-tools/latest
      mv /opt/android-sdk/cmdline-tools/* /opt/android-sdk/cmdline-tools/latest/ 2>/dev/null || true
      
      # Accept licenses
      yes | /opt/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses
      
      # Install required SDK components
      /opt/android-sdk/cmdline-tools/latest/bin/sdkmanager \
        "platform-tools" \
        "platforms;android-30" \
        "build-tools;33.0.0" \
        "system-images;android-30;google_apis;x86_64" \
        "emulator"
      
      # Add to PATH
      echo "/opt/android-sdk/platform-tools" >> $GITHUB_PATH
      echo "/opt/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
      echo "/opt/android-sdk/emulator" >> $GITHUB_PATH
    displayName: 'Setup Android SDK'

  - script: |
      # Create AVD (Android Virtual Device)
      echo "no" | /opt/android-sdk/cmdline-tools/latest/bin/avdmanager create avd \
        -n "test_device_30" \
        -k "system-images;android-30;google_apis;x86_64" \
        -d "pixel_4"
      
      # Start emulator in background
      /opt/android-sdk/emulator/emulator \
        -avd "test_device_30" \
        -no-audio \
        -no-window \
        -gpu swiftshader_indirect \
        -camera-back none \
        -camera-front none \
        -memory 2048 \
        -cores 2 &
      
      # Wait for emulator to start
      adb wait-for-device
      echo "Emulator started successfully"
    displayName: 'Start Android Emulator'

  - script: |
      # Wait for boot to complete
      adb shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done'
      echo "Emulator is ready"
      
      # Additional wait to ensure system is fully loaded
      sleep 30
    displayName: 'Wait for Emulator Ready'

  - script: |
      # Start Appium
      appium --base-path /wd/hub &
      sleep 15
    displayName: 'Start Appium Server'

  - script: |
      # Create results directory
      mkdir -p results
      
      # Run Robot Framework tests
      robot \
        --outputdir results \
        --timestampoutputs \
        --include "E2E" \
        --variable "PLATFORM_NAME:Android" \
        --variable "PLATFORM_VERSION:30" \
        --variable "DEVICE_NAME:Android Emulator" \
        --variable "AUTOMATION_NAME:UiAutomator2" \
        --variable "UDID:emulator-5554" \
        --variable "REMOTE_URL:http://localhost:4723/wd/hub" \
        tests/
    displayName: 'Run Robot Framework Tests'
    env:
      APP_PACKAGE: "com.org.gurutattva.app"
      APP_ACTIVITY: "com.example.gurutattva_flutter_app.MainActivity"

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'results/output.xml'
      mergeTestResults: true
      testRunTitle: 'Robot Framework Mobile Tests'
    condition: always()

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Test Results'
    inputs:
      pathToPublish: 'results'
      artifactName: 'robot-test-results'
    condition: always()

  - script: |
      # Stop emulator
      adb emu kill || true
      
      # Cleanup
      pkill -f appium || true
      pkill -f emulator || true
    displayName: 'Cleanup'
    condition: always()

- job: EmailNotification
  displayName: 'Send Email Notification'
  dependsOn: MobileTests
  condition: always()
  
  steps:
  - download: current
    artifact: robot-test-results
    displayName: 'Download Test Results'

  - task: PowerShell@2
    displayName: 'Send Email Notification'
    inputs:
      targetType: 'inline'
      script: |
        # Email configuration
        $smtpServer = "smtp-mail.outlook.com"
        $smtpPort = 587
        $username = "$(EMAIL_USERNAME)"
        $password = "$(EMAIL_PASSWORD)"
        $from = "$(EMAIL_FROM)"
        $to = "$(EMAIL_TO)"
        
        # Create email subject
        $subject = "Robot Framework Test Results - $env:BUILD_REASON"
        
        # Create simple email body
        $body = "Robot Framework mobile tests have been executed successfully.`n`nProject: $env:SYSTEM_TEAMPROJECT`nBuild ID: $env:BUILD_BUILDID`nTrigger: $env:BUILD_REASON`n`nPlease check the attached HTML report for detailed results.`n`nBest regards,`nRobot Framework CI/CD"
        
        # Create SMTP client
        $smtp = New-Object System.Net.Mail.SmtpClient($smtpServer, $smtpPort)
        $smtp.EnableSsl = $true
        $smtp.Credentials = New-Object System.Net.NetworkCredential($username, $password)
        
        # Create email message
        $message = New-Object System.Net.Mail.MailMessage($from, $to, $subject, $body)
        
        # Add HTML report as attachment if exists
        $reportPath = "$env:AGENT_WORKFOLDER\1\s\robot-test-results\report.html"
        if (Test-Path $reportPath) {
            $attachment = New-Object System.Net.Mail.Attachment($reportPath)
            $message.Attachments.Add($attachment)
        }
        
        # Send email
        try {
            $smtp.Send($message)
            Write-Host "Email notification sent successfully"
        }
        catch {
            Write-Host "Failed to send email: $($_.Exception.Message)"
        }
        finally {
            $message.Dispose()
            $smtp.Dispose()
        }
