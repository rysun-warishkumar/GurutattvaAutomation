# Azure DevOps Pipeline for Robot Framework Tests
trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - README.md
      - .gitignore

pr:
  branches:
    include:
      - main

schedules:
- cron: "0 2 * * *"  # Daily at 2 AM UTC
  displayName: Daily test run
  branches:
    include:
      - main
  always: true

pool:
  vmImage: 'ubuntu-latest'

variables:
  pythonVersion: '3.12'
  nodeVersion: '18'

stages:
- stage: MobileTests
  displayName: 'Mobile Tests'
  jobs:
  - job: MobileTestsJob
    displayName: 'Run Mobile Tests'
    steps:
    - checkout: self
      fetchDepth: 0

    - task: UsePythonVersion@0
      displayName: 'Set up Python'
      inputs:
        versionSpec: '$(pythonVersion)'
        addToPath: true

    - task: NodeTool@0
      displayName: 'Set up Node.js'
      inputs:
        versionSpec: '$(nodeVersion)'

    - task: PipAuthenticate@1
      displayName: 'Pip Authenticate'
      inputs:
        artifactFeeds: ''

    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install Python dependencies'

    - task: JavaToolInstaller@0
      displayName: 'Set up JDK 17'
      inputs:
        versionSpec: '17'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'

    - script: |
        # Create Android SDK directory
        sudo mkdir -p /usr/local/lib/android/sdk
        sudo chown -R $(whoami):$(whoami) /usr/local/lib/android/sdk
        
        # Download and setup Android SDK
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
        unzip -q commandlinetools-linux-11076708_latest.zip
        mkdir -p /usr/local/lib/android/sdk/cmdline-tools/latest
        mv cmdline-tools/* /usr/local/lib/android/sdk/cmdline-tools/latest/
        rm -rf cmdline-tools commandlinetools-linux-11076708_latest.zip
        
        # Set up environment
        export ANDROID_HOME=$(ANDROID_SDK_ROOT)
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools
        
        # Accept licenses and install components
        yes | sdkmanager --licenses
        sdkmanager "platform-tools" "platforms;android-30" "build-tools;30.0.3"
        sdkmanager "system-images;android-30;google_apis;x86_64"
        sdkmanager "emulator"
      displayName: 'Install Android SDK components'
      env:
        ANDROID_SDK_ROOT: /usr/local/lib/android/sdk

    - script: |
        echo "no" | avdmanager create avd -n Pixel_4_2 -k "system-images;android-30;google_apis;x86_64" -d "pixel_4" --force
      displayName: 'Create AVD'
      env:
        ANDROID_HOME: /usr/local/lib/android/sdk
        ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
        PATH: $(PATH):/usr/local/lib/android/sdk/cmdline-tools/latest/bin:/usr/local/lib/android/sdk/platform-tools

    - script: |
        echo "=== Starting emulator manually ==="
        export ANDROID_HOME=$(ANDROID_SDK_ROOT)
        export PATH=$PATH:$ANDROID_HOME/emulator:$ANDROID_HOME/platform-tools
        
        # Kill any existing emulator processes
        pkill -f emulator || true
        adb kill-server || true
        sleep 5
        
        # Start ADB server
        adb start-server
        
        # Start emulator in background with more conservative settings
        $ANDROID_HOME/emulator/emulator -avd Pixel_4_2 -no-window -gpu swiftshader_indirect -no-audio -no-boot-anim -no-snapshot -wipe-data -memory 1536 -cores 1 -no-metrics -qemu -enable-kvm &
        EMULATOR_PID=$!
        echo "Emulator PID: $EMULATOR_PID"
        
        # Wait longer for emulator to start
        echo "Waiting for emulator to start (up to 10 minutes)..."
        sleep 30
        
        # Wait for emulator to be ready with more patience
        echo "Waiting for emulator to be ready..."
        for i in {1..60}; do
          if adb devices | grep -q "emulator-5554.*device"; then
            echo "Device is online!"
            break
          fi
          echo "Attempt $i/60: Device not ready yet..."
          sleep 10
        done
        
        # Wait for boot completion
        echo "Waiting for boot completion..."
        for i in {1..60}; do
          if adb shell getprop sys.boot_completed 2>/dev/null | grep -q "1"; then
            echo "Boot completed!"
            break
          fi
          echo "Attempt $i/60: Boot not completed yet..."
          sleep 10
        done
        
        echo "Emulator is ready!"
      displayName: 'Start emulator manually'
      env:
        ANDROID_HOME: /usr/local/lib/android/sdk
        ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
        PATH: $(PATH):/usr/local/lib/android/sdk/cmdline-tools/latest/bin:/usr/local/lib/android/sdk/platform-tools

    - script: |
        echo "=== Installing APK ==="
        export ANDROID_HOME=$(ANDROID_SDK_ROOT)
        export PATH=$PATH:$ANDROID_HOME/emulator:$ANDROID_HOME/platform-tools
        
        # Check for APK file with correct name
        if [ -f "./automation_dhyan_9thSept 1.apk" ]; then
          echo "Installing APK: automation_dhyan_9thSept 1.apk"
          adb install -r "./automation_dhyan_9thSept 1.apk"
          echo "APK installed successfully"
        elif [ -f "./automation_dhyan_9thSept.apk" ]; then
          echo "Installing APK: automation_dhyan_9thSept.apk"
          adb install -r "./automation_dhyan_9thSept.apk"
          echo "APK installed successfully"
        else
          echo "APK file not found, listing files:"
          ls -la *.apk || echo "No APK files found"
          exit 1
        fi
        
        echo "=== Installing Appium ==="
        npm install -g appium@latest
        appium driver install uiautomator2
        
        echo "=== Starting Appium Server ==="
        appium --port 4723 --log-level info &
        APPIUM_PID=$!
        sleep 20
        
        echo "=== Verifying Appium connection ==="
        timeout 60 bash -c 'until curl -f http://localhost:4723/status; do sleep 5; done'
        
        echo "=== Running CI Verification Tests ==="
        robot --outputdir results --include "CI" tests/CI_Verification.robot
        
        echo "=== Running Fixed Setup Tests ==="
        robot --outputdir results --include "FixedSetup" tests/Test_Fixed_Setup.robot
        
        echo "=== Running Robot Framework Tests ==="
        robot --outputdir results --include "WarishTest" tests/
        
        echo "=== Stopping Appium ==="
        kill $APPIUM_PID || true
      displayName: 'Install APK and run tests'
      env:
        ANDROID_HOME: /usr/local/lib/android/sdk
        ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
        PATH: $(PATH):/usr/local/lib/android/sdk/cmdline-tools/latest/bin:/usr/local/lib/android/sdk/platform-tools

    - script: |
        echo "=== Stopping emulator ==="
        export ANDROID_HOME=$(ANDROID_SDK_ROOT)
        export PATH=$PATH:$ANDROID_HOME/emulator:$ANDROID_HOME/platform-tools
        
        # Kill emulator process
        pkill -f emulator || true
        adb emu kill || true
      displayName: 'Stop emulator'
      condition: always()
      env:
        ANDROID_HOME: /usr/local/lib/android/sdk
        ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
        PATH: $(PATH):/usr/local/lib/android/sdk/cmdline-tools/latest/bin:/usr/local/lib/android/sdk/platform-tools

    - task: PublishTestResults@2
      displayName: 'Publish test results'
      condition: always()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'results/output.xml'
        testRunTitle: 'Robot Framework Mobile Tests'
        mergeTestResults: true

    - task: PublishBuildArtifacts@1
      displayName: 'Upload test artifacts'
      condition: always()
      inputs:
        pathToPublish: 'results'
        artifactName: 'mobile-test-results'
        publishLocation: 'Container'

- stage: WebTests
  displayName: 'Web Tests'
  jobs:
  - job: WebTestsJob
    displayName: 'Run Web Tests'
    steps:
    - checkout: self

    - task: UsePythonVersion@0
      displayName: 'Set up Python'
      inputs:
        versionSpec: '$(pythonVersion)'
        addToPath: true

    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install Python dependencies'

    - script: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
      displayName: 'Install Chrome'

    - script: |
        echo "=== Running Web Tests ==="
        robot --outputdir web-results --include "WebTest" tests/
      displayName: 'Run web tests'

    - task: PublishTestResults@2
      displayName: 'Publish web test results'
      condition: always()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'web-results/output.xml'
        testRunTitle: 'Robot Framework Web Tests'
        mergeTestResults: true

    - task: PublishBuildArtifacts@1
      displayName: 'Upload web test artifacts'
      condition: always()
      inputs:
        pathToPublish: 'web-results'
        artifactName: 'web-test-results'
        publishLocation: 'Container'
